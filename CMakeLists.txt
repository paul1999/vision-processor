#    Copyright 2024 Felix Weinmann
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

cmake_minimum_required(VERSION 3.22)
project(vision_processor)
enable_language(ASM)

option(WITH_SPINNAKER "Build with Spinnaker support (if library available)" ON)
option(WITH_MVIMPACT "Build with mvIMPACT/Bluefox support (if library available)" ON)
option(WITH_DC1394 "Build with libdc1394-2 support (if library available)" OFF)

# According to SSL-Vision, this is a problem
if(WITH_MVIMPACT AND WITH_DC1394)
    message(FATAL_ERROR "DC1394 and mvImpact are not compatible: mvImpact crashes when creating device manager")
endif()

# Adapted from https://stackoverflow.com/a/48832234 CC BY-SA 4.0 by einpoklum
if (NOT CMAKE_BUILD_TYPE OR CMAKE_BUILD_TYPE STREQUAL "")
    set(CMAKE_BUILD_TYPE "Release" CACHE STRING "" FORCE)
endif()

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_FLAGS_RELEASE "-O3 -march=native -ftree-vectorize -ffast-math")
add_compile_options("-Wall")
list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)

find_package(PkgConfig REQUIRED)
pkg_check_modules(LIBAV REQUIRED IMPORTED_TARGET libavformat libavcodec libavutil)

find_package(Eigen3 REQUIRED)
find_package(mvIMPACT)
find_package(OpenCL REQUIRED)
find_package(OpenCV REQUIRED COMPONENTS core imgproc imgcodecs videoio)
find_package(Spinnaker)
find_package(yaml-cpp REQUIRED)
include(CheckDC1394)

# Protobuf links to Abseil starting with 4.22.0. The FindProtobuf module does
# not yet account for this, so we need to use Config mode instead. However,
# Protobuf does not provide a Config CMake script on old versions, so we need
# to fallback to Module mode in that case.
find_package(Protobuf CONFIG QUIET)
if (Protobuf_FOUND)
    message(STATUS "Found Protobuf ${Protobuf_VERSION} via Config mode")
else()
    find_package(Protobuf REQUIRED)
    message(STATUS "Found Protobuf ${Protobuf_VERSION} via Module mode")
endif()


add_compile_definitions(CL_HPP_TARGET_OPENCL_VERSION=300)
# m (c math) and stdc++ (c++ standard library) explicitly required by LLD
link_libraries("m" "stdc++" ${YAML_CPP_LIBRARIES} ${OpenCV_LIBS} PkgConfig::LIBAV ${SPINNAKER_LIBS} OpenCL::OpenCL protobuf::libprotobuf ${mvIMPACT_LIBS} ${DC1394_LIBRARIES})
include_directories(SYSTEM ${YAML_INCLUDE_DIRS} ${OpenCV_INCLUDE_DIRS} ${SPINNAKER_INCLUDE_DIRS} Eigen3::Eigen ${mvIMPACT_INCLUDE_DIRS})

include_directories(src)
file(GLOB PROTO_FILES proto/*.proto)
file(GLOB CL_KERNELS RELATIVE "${CMAKE_SOURCE_DIR}" kernel/*.cl)
file(GLOB_RECURSE SRC src/*.cpp src/*.c)
list(REMOVE_ITEM SRC "${CMAKE_SOURCE_DIR}/src/main.cpp" "${CMAKE_SOURCE_DIR}/src/geometry_benchmark.cpp" "${CMAKE_SOURCE_DIR}/src/blob_benchmark.cpp")

# Adapted from https://stackoverflow.com/a/56006001 CC BY-SA 4.0 by Itay Grudev
# Adapted from https://stackoverflow.com/a/4910421 CC BY-SY 4.0 by John Ripley
set(CL_KERNEL_HEADER "//Autogenerated by CMake, edits will be overridden\n#pragma once\n")
set(CL_KERNEL_ASM ".section .rodata\n") # # Autogenerated by CMake, edits will be overridden\n
foreach(input_file IN LISTS CL_KERNELS)
    cmake_path(GET input_file FILENAME input_filename)
    string(REPLACE . _ input_file_cname "${input_file}")
    string(REPLACE / _ input_file_cname "${input_file_cname}")
    string(REPLACE . _ input_filename_cname "${input_filename}")

    list(APPEND CL_KERNEL_PATHS "${CMAKE_SOURCE_DIR}/${input_file}")
    string(APPEND CL_KERNEL_ASM ".global kernel_${input_filename_cname}\n.type kernel_${input_filename_cname}, @object\nkernel_${input_filename_cname}:\n\t.incbin \"${CMAKE_SOURCE_DIR}/${input_file}\"\n\t.byte 0\n\n")
    string(APPEND CL_KERNEL_HEADER "extern const char kernel_${input_filename_cname}[];\n")
endforeach()

# Don't override cl_kernels.h or cl_kernels.S if already up-to-date to prevent unnecessary recompilation
if(EXISTS "${CMAKE_SOURCE_DIR}/src/cl_kernels.h")
    file(READ "${CMAKE_SOURCE_DIR}/src/cl_kernels.h" CL_KERNEL_HEADER_OLD)
endif()
if(NOT "${CL_KERNEL_HEADER_OLD}" STREQUAL "${CL_KERNEL_HEADER}")
    file(WRITE "${CMAKE_SOURCE_DIR}/src/cl_kernels.h" "${CL_KERNEL_HEADER}")
    message(STATUS "(Re-)Generated cl_kernels.h")
endif()

if(EXISTS "src/cl_kernels.S")
    file(READ "src/cl_kernels.S" CL_KERNEL_ASM_OLD)
endif()
if(NOT "${CL_KERNEL_ASM_OLD}" STREQUAL "${CL_KERNEL_ASM}")
    file(WRITE "src/cl_kernels.S" "${CL_KERNEL_ASM}")
    message(STATUS "(Re-)Generated cl_kernels.S")
endif()

add_custom_target(AUTOGENERATE DEPENDS "src/cl_kernels.S")
set_property(SOURCE "src/cl_kernels.S" APPEND PROPERTY OBJECT_DEPENDS ${CL_KERNEL_PATHS})
protobuf_generate(TARGET AUTOGENERATE LANGUAGE cpp PROTOC_OUT_DIR "${CMAKE_SOURCE_DIR}/src" PROTOS ${PROTO_FILES})
get_property(PROTO_SRCS TARGET AUTOGENERATE PROPERTY SOURCES)
list(APPEND SRC ${PROTO_SRCS} "src/cl_kernels.S")

add_executable(${PROJECT_NAME} ${SRC} "src/main.cpp")
add_executable("geometry_benchmark" ${SRC} "src/geometry_benchmark.cpp")
add_executable("blob_benchmark" ${SRC} "src/blob_benchmark.cpp")

add_dependencies(${PROJECT_NAME} AUTOGENERATE)
add_dependencies("geometry_benchmark" AUTOGENERATE)
add_dependencies("blob_benchmark" AUTOGENERATE)

install(TARGETS ${PROJECT_NAME} DESTINATION /usr/local/bin)
